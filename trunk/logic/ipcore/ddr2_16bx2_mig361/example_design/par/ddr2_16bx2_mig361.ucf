############################################################################
## 
##  Xilinx, Inc. 2006            www.xilinx.com 
##  周二 十二月 2 17:56:37 2014
##  Generated by MIG Version 3.6.1
##  
############################################################################
##  File name :       ddr2_16bx2_mig361.ucf
## 
##  Details :     Constraints file
##                    FPGA family:       virtex5
##                    FPGA:              xc5vlx110t-ff1136
##                    Speedgrade:        -1
##                    Design Entry:      VHDL
##                    Design:            with Test bench
##                    DCM Used:          Enable
##                    Two Bytes per Bank:Disable
##                    No.Of Controllers: 2
##
############################################################################ 

############################################################################
# Clock constraints                                                        #
############################################################################

NET "u_ddr2_infrastructure_f0/sys_clk_ibufg" TNM_NET =  "SYS_CLK_DDR2_f0";
TIMESPEC "TS_SYS_CLK_DDR2_f0" = PERIOD "SYS_CLK_DDR2_f0" 5 ns HIGH 50 %;

NET "u_ddr2_infrastructure_f0/clk200_ibufg" TNM_NET = "SYS_CLK_200";
TIMESPEC "TS_SYS_CLK_200" = PERIOD "SYS_CLK_200" 5 ns HIGH 50 %;

############################################################################
########################################################################
# Controller 0
# Memory Device: DDR2_SDRAM->Components->MT47H128M16XX-3
# Supported Part Numbers: MT47H128M16HG-3

# Data Width:     16
# Frequency:      200
# Time Period:      5000
# Data Mask:     1
########################################################################


################################################################################
# I/O STANDARDS
################################################################################

NET  "c0_ddr2_dq[*]"                            IOSTANDARD = SSTL18_II_DCI;
NET  "c0_ddr2_a[*]"                             IOSTANDARD = SSTL18_II;
NET  "c0_ddr2_ba[*]"                            IOSTANDARD = SSTL18_II;
NET  "c0_ddr2_ras_n"                            IOSTANDARD = SSTL18_II;
NET  "c0_ddr2_cas_n"                            IOSTANDARD = SSTL18_II;
NET  "c0_ddr2_we_n"                             IOSTANDARD = SSTL18_II;
NET  "c0_ddr2_cs_n[*]"                          IOSTANDARD = SSTL18_II;
NET  "c0_ddr2_odt[*]"                           IOSTANDARD = SSTL18_II;
NET  "c0_ddr2_cke[*]"                           IOSTANDARD = SSTL18_II;
NET  "c0_ddr2_dm[*]"                            IOSTANDARD = SSTL18_II_DCI;
NET  "ddr2_sys_clk_f0"                          IOSTANDARD = LVCMOS25;
NET  "idly_clk_200"                             IOSTANDARD = LVCMOS25;
NET  "sys_rst_n"                                IOSTANDARD = LVCMOS18;
NET  "c0_phy_init_done"                         IOSTANDARD = LVCMOS18;
NET  "c0_error"                                 IOSTANDARD = LVCMOS18;
NET  "c0_ddr2_dqs[*]"                           IOSTANDARD = DIFF_SSTL18_II_DCI;
NET  "c0_ddr2_dqs_n[*]"                         IOSTANDARD = DIFF_SSTL18_II_DCI;
NET  "c0_ddr2_ck[*]"                            IOSTANDARD = DIFF_SSTL18_II;
NET  "c0_ddr2_ck_n[*]"                          IOSTANDARD = DIFF_SSTL18_II;

################################################################################
# Location Constraints
################################################################################

NET  "c0_ddr2_dq[0]"                             LOC = "D34" ;          #Bank 11
NET  "c0_ddr2_dq[1]"                             LOC = "G33" ;          #Bank 11
NET  "c0_ddr2_dq[2]"                             LOC = "E34" ;          #Bank 11
NET  "c0_ddr2_dq[3]"                             LOC = "F34" ;          #Bank 11
NET  "c0_ddr2_dq[4]"                             LOC = "J34" ;          #Bank 11
NET  "c0_ddr2_dq[5]"                             LOC = "A33" ;          #Bank 11
NET  "c0_ddr2_dq[6]"                             LOC = "H34" ;          #Bank 11
NET  "c0_ddr2_dq[7]"                             LOC = "B33" ;          #Bank 11
NET  "c0_ddr2_dq[8]"                             LOC = "C32" ;          #Bank 11
NET  "c0_ddr2_dq[9]"                             LOC = "G32" ;          #Bank 11
NET  "c0_ddr2_dq[10]"                            LOC = "D32" ;          #Bank 11
NET  "c0_ddr2_dq[11]"                            LOC = "E33" ;          #Bank 11
NET  "c0_ddr2_dq[12]"                            LOC = "L33" ;          #Bank 11
NET  "c0_ddr2_dq[13]"                            LOC = "C33" ;          #Bank 11
NET  "c0_ddr2_dq[14]"                            LOC = "K33" ;          #Bank 11
NET  "c0_ddr2_dq[15]"                            LOC = "C34" ;          #Bank 11
NET  "c0_ddr2_a[13]"                             LOC = "M31" ;          #Bank 15
NET  "c0_ddr2_a[12]"                             LOC = "U33" ;          #Bank 11
NET  "c0_ddr2_a[11]"                             LOC = "M32" ;          #Bank 11
NET  "c0_ddr2_a[10]"                             LOC = "R31" ;          #Bank 15
NET  "c0_ddr2_a[9]"                              LOC = "U32" ;          #Bank 11
NET  "c0_ddr2_a[8]"                              LOC = "L31" ;          #Bank 15
NET  "c0_ddr2_a[7]"                              LOC = "T33" ;          #Bank 11
NET  "c0_ddr2_a[6]"                              LOC = "K31" ;          #Bank 15
NET  "c0_ddr2_a[5]"                              LOC = "U31" ;          #Bank 11
NET  "c0_ddr2_a[4]"                              LOC = "K32" ;          #Bank 11
NET  "c0_ddr2_a[3]"                              LOC = "T31" ;          #Bank 15
NET  "c0_ddr2_a[2]"                              LOC = "J31" ;          #Bank 15
NET  "c0_ddr2_a[1]"                              LOC = "P31" ;          #Bank 15
NET  "c0_ddr2_a[0]"                              LOC = "H30" ;          #Bank 15
NET  "c0_ddr2_ba[2]"                             LOC = "T34" ;          #Bank 11
NET  "c0_ddr2_ba[1]"                             LOC = "P32" ;          #Bank 11
NET  "c0_ddr2_ba[0]"                             LOC = "R34" ;          #Bank 11
NET  "c0_ddr2_ras_n"                             LOC = "E31" ;          #Bank 15
NET  "c0_ddr2_cas_n"                             LOC = "G31" ;          #Bank 15
NET  "c0_ddr2_we_n"                              LOC = "N32" ;          #Bank 11
NET  "c0_ddr2_cs_n[0]"                           LOC = "F31" ;          #Bank 15
NET  "c0_ddr2_odt[0]"                            LOC = "B32" ;          #Bank 11
NET  "c0_ddr2_cke[0]"                            LOC = "P34" ;          #Bank 11
NET  "c0_ddr2_dm[0]"                             LOC = "F33" ;          #Bank 11
NET  "c0_ddr2_dm[1]"                             LOC = "E32" ;          #Bank 11
NET  "ddr2_sys_clk_f0"                           LOC = "H17" ;          #Bank 3
NET  "idly_clk_200"                              LOC = "G15" ;          #Bank 3
NET  "sys_rst_n"                                 LOC = "A13" ;          #Bank 20
NET  "c0_phy_init_done"                          LOC = "B12" ;          #Bank 20
NET  "c0_error"                                  LOC = "A14" ;          #Bank 5
NET  "c0_ddr2_dqs[0]"                            LOC = "L34" ;          #Bank 11
NET  "c0_ddr2_dqs_n[0]"                          LOC = "K34" ;          #Bank 11
NET  "c0_ddr2_dqs[1]"                            LOC = "J32" ;          #Bank 11
NET  "c0_ddr2_dqs_n[1]"                          LOC = "H33" ;          #Bank 11
NET  "c0_ddr2_ck[0]"                             LOC = "R33" ;          #Bank 11
NET  "c0_ddr2_ck_n[0]"                           LOC = "R32" ;          #Bank 11


###############################################################################
# Define multicycle paths - these paths may take longer because additional
# time allowed for logic to settle in calibration/initialization FSM
###############################################################################

# MIG 2.1: Eliminate Timegroup definitions for CLK0, and CLK90. Instead trace
#          multicycle paths from originating flip-flop to ANY destination
#          flip-flop (or in some cases, it can also be a BRAM)
# MUX Select for either rising/falling CLK0 for 2nd stage read capture
INST "u_ddr2_top_0/*/u_phy_calib/gen_rd_data_sel*.u_ff_rd_data_sel" TNM = "TNM_RD_DATA_SEL_C0";
TIMESPEC "TS_MC_RD_DATA_SEL_C0" = FROM "TNM_RD_DATA_SEL_C0" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
# MUX select for read data - optional delay on data to account for byte skews
INST "u_ddr2_top_0/*/u_usr_rd/gen_rden_sel_mux*.u_ff_rden_sel_mux" TNM = "TNM_RDEN_SEL_MUX_C0";
TIMESPEC "TS_MC_RDEN_SEL_MUX_C0" = FROM "TNM_RDEN_SEL_MUX_C0" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
# Calibration/Initialization complete status flag (for PHY logic only) - can
# be used to drive both flip-flops and BRAMs
INST "u_ddr2_top_0/*/u_phy_init/u_ff_phy_init_data_sel" TNM = "TNM_PHY_INIT_DATA_SEL_C0";
TIMESPEC "TS_MC_PHY_INIT_DATA_SEL_0_C0" = FROM "TNM_PHY_INIT_DATA_SEL_C0" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
# The RAM path is only used in cases where Write Latency (Additive Latency + 
# (CAS Latency - 1) + (1 in case of RDIMM)) is 2 or below. So these constraints are 
# valid for CAS Latency = 3, Additive Latency = 0 and selected part is not RDIMM. 
# If Write Latency is higher than 3, then a warning will appear in PAR, 
# and the constraint can be ignored as this path does not exist. RAM constraint 
# can be safely removed if the warning is not to be displayed.
TIMESPEC "TS_MC_PHY_INIT_DATA_SEL_90_C0" = FROM "TNM_PHY_INIT_DATA_SEL_C0" TO RAMS
"TS_SYS_CLK_DDR2_f0" * 4;
# Select (address) bits for SRL32 shift registers used in stage3/stage4
# calibration
INST "u_ddr2_top_0/*/u_phy_calib/gen_gate_dly*.u_ff_gate_dly" TNM = "TNM_GATE_DLY_C0";
TIMESPEC "TS_MC_GATE_DLY_C0" = FROM "TNM_GATE_DLY_C0" TO FFS "TS_SYS_CLK_DDR2_f0" * 4;

INST "u_ddr2_top_0/*/u_phy_calib/gen_rden_dly*.u_ff_rden_dly" TNM = "TNM_RDEN_DLY_C0";
TIMESPEC "TS_MC_RDEN_DLY_C0" = FROM "TNM_RDEN_DLY_C0" TO FFS "TS_SYS_CLK_DDR2_f0" * 4;

INST "u_ddr2_top_0/*/u_phy_calib/gen_cal_rden_dly*.u_ff_cal_rden_dly"
  TNM = "TNM_CAL_RDEN_DLY_C0";
TIMESPEC "TS_MC_CAL_RDEN_DLY_C0" = FROM "TNM_CAL_RDEN_DLY_C0" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
############################################################################### 
#The following constraint is added to prevent (false) hold time violations on
#the data path from stage1 to stage2 capture flops.  Stage1 flops are clocked by 
#the delayed DQS and stage2 flops are clocked by the clk0 clock. Placing a TIG 
#on the DQ IDDR capture flop instance to achieve this is acceptable because timing
#is guaranteed through the use of separate Predictable IP constraints. These
#violations are reported when anunconstrained path report is run.	  
############################################################################### 
INST "*/gen_dq[*].u_iob_dq/gen*.u_iddr_dq" TIG ;
###############################################################################
# DQS Read Post amble Glitch Squelch circuit related constraints
###############################################################################

###############################################################################
# LOC placement of DQS-squelch related IDDR and IDELAY elements
# Each circuit can be located at any of the following locations:
#  1. Unused "N"-side of DQS differential pair I/O
#  2. DM data mask (output only, input side is free for use)
#  3. Any output-only site
###############################################################################

###############################################################################
#The following constraint is added to avoid the HOLD violations in the trace report
#when run for unconstrained paths.These two FF groups will be clocked by two different
# clocks and hence there should be no timing analysis performed on this path.
###############################################################################
INST "u_ddr2_top_0/u_mem_if_top/u_phy_top/u_phy_io/u_phy_calib/gen_gate[*].u_en_dqs_ff" TNM = EN_DQS_FF_C0; 
TIMESPEC TS_FROM_EN_DQS_FF_TO_DQ_CE_FF_C0= FROM EN_DQS_FF_C0 TO TNM_DQ_CE_IDDR_C0 3.85 ns DATAPATHONLY; 

INST "u_ddr2_top_0/*/gen_dqs[0].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y178";
INST "u_ddr2_top_0/*/gen_dqs[0].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y178";
INST "u_ddr2_top_0/*/gen_dqs[1].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y182";
INST "u_ddr2_top_0/*/gen_dqs[1].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y182";

###############################################################################
# LOC and timing constraints for flop driving DQS CE enable signal
# from fabric logic. Even though the absolute delay on this path is
# calibrated out (when synchronizing this output to DQS), the delay
# should still be kept as low as possible to reduce post-calibration
# voltage/temp variations - these are roughly proportional to the
# absolute delay of the path.                                    
#	The following code has been commented for V5 as the predictable IP will take 
#	care of placement of these flops by meeting the MAXDELAY requirement.  
#	These constraints will be removed in the next release.  
###############################################################################

INST "u_ddr2_top_0/*/u_phy_calib/gen_gate[0].u_en_dqs_ff"  LOC = SLICE_X0Y89;
INST "u_ddr2_top_0/*/u_phy_calib/gen_gate[1].u_en_dqs_ff"  LOC = SLICE_X0Y91;

# Control for DQS gate - from fabric flop. Prevent "runaway" delay -
# two parts to this path: (1) from fabric flop to IDELAY, (2) from
# IDELAY to asynchronous reset of IDDR that drives the DQ CE's
# This can be relaxed by the user for lower frequencies:
# 300MHz = 850ps, 267MHz = 900ps. At 200MHz = 950ps.
# In general PAR should be able to route this
# within 900ps over all speed grades.
NET "u_ddr2_top_0/*/u_phy_io/en_dqs[*]" MAXDELAY = 600 ps;
NET "u_ddr2_top_0/*/u_phy_io/gen_dqs*.u_iob_dqs/en_dqs_sync" MAXDELAY = 850 ps;

###############################################################################
# "Half-cycle" path constraint from IOB flip-flop to CE pin for all DQ IDDR's
# for DQS Read Post amble Glitch Squelch circuit
###############################################################################

# Max delay from output of IOB flip-flop to CE input of DQ IDDRs =
#  tRPST + some slack where slack account for rise-time of DQS on board.
#  For now assume slack = 0.400ns (based on initial SPICE simulations,
#  assumes use of ODT), so time = 0.4*Tcyc + 0.40ns = 1.6ns @333MHz
INST "u_ddr2_top_0/*/gen_dqs[*].u_iob_dqs/u_iddr_dq_ce" TNM = "TNM_DQ_CE_IDDR_C0";
INST "u_ddr2_top_0/*/gen_dq[*].u_iob_dq/gen_stg2_*.u_iddr_dq" TNM = "TNM_DQS_FLOPS_C0";
TIMESPEC "TS_DQ_CE_C0" = FROM "TNM_DQ_CE_IDDR_C0" TO "TNM_DQS_FLOPS_C0" 2.4 ns;

########################################################################
# Controller 1
# Memory Device: DDR2_SDRAM->Components->MT47H128M16XX-3
# Supported Part Numbers: MT47H128M16HG-3

# Data Width:     16
# Frequency:      200
# Time Period:      5000
# Data Mask:     1
########################################################################


################################################################################
# I/O STANDARDS
################################################################################

NET  "c1_ddr2_dq[*]"                            IOSTANDARD = SSTL18_II_DCI;
NET  "c1_ddr2_a[*]"                             IOSTANDARD = SSTL18_II;
NET  "c1_ddr2_ba[*]"                            IOSTANDARD = SSTL18_II;
NET  "c1_ddr2_ras_n"                            IOSTANDARD = SSTL18_II;
NET  "c1_ddr2_cas_n"                            IOSTANDARD = SSTL18_II;
NET  "c1_ddr2_we_n"                             IOSTANDARD = SSTL18_II;
NET  "c1_ddr2_cs_n[*]"                          IOSTANDARD = SSTL18_II;
NET  "c1_ddr2_odt[*]"                           IOSTANDARD = SSTL18_II;
NET  "c1_ddr2_cke[*]"                           IOSTANDARD = SSTL18_II;
NET  "c1_ddr2_dm[*]"                            IOSTANDARD = SSTL18_II_DCI;
NET  "c1_phy_init_done"                         IOSTANDARD = LVCMOS18;
NET  "c1_error"                                 IOSTANDARD = LVCMOS18;
NET  "c1_ddr2_dqs[*]"                           IOSTANDARD = DIFF_SSTL18_II_DCI;
NET  "c1_ddr2_dqs_n[*]"                         IOSTANDARD = DIFF_SSTL18_II_DCI;
NET  "c1_ddr2_ck[*]"                            IOSTANDARD = DIFF_SSTL18_II;
NET  "c1_ddr2_ck_n[*]"                          IOSTANDARD = DIFF_SSTL18_II;

################################################################################
# Location Constraints
################################################################################

NET  "c1_ddr2_dq[0]"                             LOC = "AF33" ;          #Bank 13
NET  "c1_ddr2_dq[1]"                             LOC = "AL34" ;          #Bank 13
NET  "c1_ddr2_dq[2]"                             LOC = "AK34" ;          #Bank 13
NET  "c1_ddr2_dq[3]"                             LOC = "AK33" ;          #Bank 13
NET  "c1_ddr2_dq[4]"                             LOC = "AN34" ;          #Bank 13
NET  "c1_ddr2_dq[5]"                             LOC = "AC34" ;          #Bank 13
NET  "c1_ddr2_dq[6]"                             LOC = "AN33" ;          #Bank 13
NET  "c1_ddr2_dq[7]"                             LOC = "AD34" ;          #Bank 13
NET  "c1_ddr2_dq[8]"                             LOC = "AG32" ;          #Bank 13
NET  "c1_ddr2_dq[9]"                             LOC = "AM32" ;          #Bank 13
NET  "c1_ddr2_dq[10]"                            LOC = "AJ32" ;          #Bank 13
NET  "c1_ddr2_dq[11]"                            LOC = "AK32" ;          #Bank 13
NET  "c1_ddr2_dq[12]"                            LOC = "AN32" ;          #Bank 13
NET  "c1_ddr2_dq[13]"                            LOC = "AE33" ;          #Bank 13
NET  "c1_ddr2_dq[14]"                            LOC = "AP32" ;          #Bank 13
NET  "c1_ddr2_dq[15]"                            LOC = "AE32" ;          #Bank 13
NET  "c1_ddr2_a[13]"                             LOC = "V33" ;          #Bank 13
NET  "c1_ddr2_a[12]"                             LOC = "AC33" ;          #Bank 13
NET  "c1_ddr2_a[11]"                             LOC = "Y32" ;          #Bank 13
NET  "c1_ddr2_a[10]"                             LOC = "AF30" ;          #Bank 17
NET  "c1_ddr2_a[9]"                              LOC = "AC30" ;          #Bank 17
NET  "c1_ddr2_a[8]"                              LOC = "V32" ;          #Bank 13
NET  "c1_ddr2_a[7]"                              LOC = "AC32" ;          #Bank 13
NET  "c1_ddr2_a[6]"                              LOC = "AA31" ;          #Bank 17
NET  "c1_ddr2_a[5]"                              LOC = "AD32" ;          #Bank 13
NET  "c1_ddr2_a[4]"                              LOC = "Y33" ;          #Bank 13
NET  "c1_ddr2_a[3]"                              LOC = "AD30" ;          #Bank 17
NET  "c1_ddr2_a[2]"                              LOC = "AB31" ;          #Bank 17
NET  "c1_ddr2_a[1]"                              LOC = "AF31" ;          #Bank 17
NET  "c1_ddr2_a[0]"                              LOC = "AA33" ;          #Bank 13
NET  "c1_ddr2_ba[2]"                             LOC = "AK31" ;          #Bank 17
NET  "c1_ddr2_ba[1]"                             LOC = "AJ30" ;          #Bank 17
NET  "c1_ddr2_ba[0]"                             LOC = "AG30" ;          #Bank 17
NET  "c1_ddr2_ras_n"                             LOC = "AB33" ;          #Bank 13
NET  "c1_ddr2_cas_n"                             LOC = "AB32" ;          #Bank 13
NET  "c1_ddr2_we_n"                              LOC = "AH30" ;          #Bank 17
NET  "c1_ddr2_cs_n[0]"                           LOC = "V34" ;          #Bank 13
NET  "c1_ddr2_odt[0]"                            LOC = "W34" ;          #Bank 13
NET  "c1_ddr2_cke[0]"                            LOC = "AJ31" ;          #Bank 17
NET  "c1_ddr2_dm[0]"                             LOC = "AL33" ;          #Bank 13
NET  "c1_ddr2_dm[1]"                             LOC = "AM33" ;          #Bank 13
NET  "c1_phy_init_done"                          LOC = "A23" ;          #Bank 23
NET  "c1_error"                                  LOC = "A21" ;          #Bank 23
NET  "c1_ddr2_dqs[0]"                            LOC = "AH34" ;          #Bank 13
NET  "c1_ddr2_dqs_n[0]"                          LOC = "AJ34" ;          #Bank 13
NET  "c1_ddr2_dqs[1]"                            LOC = "AF34" ;          #Bank 13
NET  "c1_ddr2_dqs_n[1]"                          LOC = "AE34" ;          #Bank 13
NET  "c1_ddr2_ck[0]"                             LOC = "AA34" ;          #Bank 13
NET  "c1_ddr2_ck_n[0]"                           LOC = "Y34" ;          #Bank 13


###############################################################################
# Define multicycle paths - these paths may take longer because additional
# time allowed for logic to settle in calibration/initialization FSM
###############################################################################

# MIG 2.1: Eliminate Timegroup definitions for CLK0, and CLK90. Instead trace
#          multicycle paths from originating flip-flop to ANY destination
#          flip-flop (or in some cases, it can also be a BRAM)
# MUX Select for either rising/falling CLK0 for 2nd stage read capture
INST "u_ddr2_top_1/*/u_phy_calib/gen_rd_data_sel*.u_ff_rd_data_sel" TNM = "TNM_RD_DATA_SEL_C1";
TIMESPEC "TS_MC_RD_DATA_SEL_C1" = FROM "TNM_RD_DATA_SEL_C1" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
# MUX select for read data - optional delay on data to account for byte skews
INST "u_ddr2_top_1/*/u_usr_rd/gen_rden_sel_mux*.u_ff_rden_sel_mux" TNM = "TNM_RDEN_SEL_MUX_C1";
TIMESPEC "TS_MC_RDEN_SEL_MUX_C1" = FROM "TNM_RDEN_SEL_MUX_C1" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
# Calibration/Initialization complete status flag (for PHY logic only) - can
# be used to drive both flip-flops and BRAMs
INST "u_ddr2_top_1/*/u_phy_init/u_ff_phy_init_data_sel" TNM = "TNM_PHY_INIT_DATA_SEL_C1";
TIMESPEC "TS_MC_PHY_INIT_DATA_SEL_0_C1" = FROM "TNM_PHY_INIT_DATA_SEL_C1" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
# The RAM path is only used in cases where Write Latency (Additive Latency + 
# (CAS Latency - 1) + (1 in case of RDIMM)) is 2 or below. So these constraints are 
# valid for CAS Latency = 3, Additive Latency = 0 and selected part is not RDIMM. 
# If Write Latency is higher than 3, then a warning will appear in PAR, 
# and the constraint can be ignored as this path does not exist. RAM constraint 
# can be safely removed if the warning is not to be displayed.
TIMESPEC "TS_MC_PHY_INIT_DATA_SEL_90_C1" = FROM "TNM_PHY_INIT_DATA_SEL_C1" TO RAMS
"TS_SYS_CLK_DDR2_f0" * 4;
# Select (address) bits for SRL32 shift registers used in stage3/stage4
# calibration
INST "u_ddr2_top_1/*/u_phy_calib/gen_gate_dly*.u_ff_gate_dly" TNM = "TNM_GATE_DLY_C1";
TIMESPEC "TS_MC_GATE_DLY_C1" = FROM "TNM_GATE_DLY_C1" TO FFS "TS_SYS_CLK_DDR2_f0" * 4;

INST "u_ddr2_top_1/*/u_phy_calib/gen_rden_dly*.u_ff_rden_dly" TNM = "TNM_RDEN_DLY_C1";
TIMESPEC "TS_MC_RDEN_DLY_C1" = FROM "TNM_RDEN_DLY_C1" TO FFS "TS_SYS_CLK_DDR2_f0" * 4;

INST "u_ddr2_top_1/*/u_phy_calib/gen_cal_rden_dly*.u_ff_cal_rden_dly"
  TNM = "TNM_CAL_RDEN_DLY_C1";
TIMESPEC "TS_MC_CAL_RDEN_DLY_C1" = FROM "TNM_CAL_RDEN_DLY_C1" TO FFS
"TS_SYS_CLK_DDR2_f0" * 4;
############################################################################### 
#The following constraint is added to prevent (false) hold time violations on
#the data path from stage1 to stage2 capture flops.  Stage1 flops are clocked by 
#the delayed DQS and stage2 flops are clocked by the clk0 clock. Placing a TIG 
#on the DQ IDDR capture flop instance to achieve this is acceptable because timing
#is guaranteed through the use of separate Predictable IP constraints. These
#violations are reported when anunconstrained path report is run.	  
############################################################################### 
INST "*/gen_dq[*].u_iob_dq/gen*.u_iddr_dq" TIG ;
###############################################################################
# DQS Read Post amble Glitch Squelch circuit related constraints
###############################################################################

###############################################################################
# LOC placement of DQS-squelch related IDDR and IDELAY elements
# Each circuit can be located at any of the following locations:
#  1. Unused "N"-side of DQS differential pair I/O
#  2. DM data mask (output only, input side is free for use)
#  3. Any output-only site
###############################################################################

###############################################################################
#The following constraint is added to avoid the HOLD violations in the trace report
#when run for unconstrained paths.These two FF groups will be clocked by two different
# clocks and hence there should be no timing analysis performed on this path.
###############################################################################
INST "u_ddr2_top_1/u_mem_if_top/u_phy_top/u_phy_io/u_phy_calib/gen_gate[*].u_en_dqs_ff" TNM = EN_DQS_FF_C1; 
TIMESPEC TS_FROM_EN_DQS_FF_TO_DQ_CE_FF_C1= FROM EN_DQS_FF_C1 TO TNM_DQ_CE_IDDR_C1 3.85 ns DATAPATHONLY; 

INST "u_ddr2_top_1/*/gen_dqs[0].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y138";
INST "u_ddr2_top_1/*/gen_dqs[0].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y138";
INST "u_ddr2_top_1/*/gen_dqs[1].u_iob_dqs/u_iddr_dq_ce"  LOC = "ILOGIC_X0Y140";
INST "u_ddr2_top_1/*/gen_dqs[1].u_iob_dqs/u_iodelay_dq_ce"  LOC = "IODELAY_X0Y140";

###############################################################################
# LOC and timing constraints for flop driving DQS CE enable signal
# from fabric logic. Even though the absolute delay on this path is
# calibrated out (when synchronizing this output to DQS), the delay
# should still be kept as low as possible to reduce post-calibration
# voltage/temp variations - these are roughly proportional to the
# absolute delay of the path.                                    
#	The following code has been commented for V5 as the predictable IP will take 
#	care of placement of these flops by meeting the MAXDELAY requirement.  
#	These constraints will be removed in the next release.  
###############################################################################

INST "u_ddr2_top_1/*/u_phy_calib/gen_gate[0].u_en_dqs_ff"  LOC = SLICE_X0Y69;
INST "u_ddr2_top_1/*/u_phy_calib/gen_gate[1].u_en_dqs_ff"  LOC = SLICE_X0Y70;

# Control for DQS gate - from fabric flop. Prevent "runaway" delay -
# two parts to this path: (1) from fabric flop to IDELAY, (2) from
# IDELAY to asynchronous reset of IDDR that drives the DQ CE's
# This can be relaxed by the user for lower frequencies:
# 300MHz = 850ps, 267MHz = 900ps. At 200MHz = 950ps.
# In general PAR should be able to route this
# within 900ps over all speed grades.
NET "u_ddr2_top_1/*/u_phy_io/en_dqs[*]" MAXDELAY = 600 ps;
NET "u_ddr2_top_1/*/u_phy_io/gen_dqs*.u_iob_dqs/en_dqs_sync" MAXDELAY = 850 ps;

###############################################################################
# "Half-cycle" path constraint from IOB flip-flop to CE pin for all DQ IDDR's
# for DQS Read Post amble Glitch Squelch circuit
###############################################################################

# Max delay from output of IOB flip-flop to CE input of DQ IDDRs =
#  tRPST + some slack where slack account for rise-time of DQS on board.
#  For now assume slack = 0.400ns (based on initial SPICE simulations,
#  assumes use of ODT), so time = 0.4*Tcyc + 0.40ns = 1.6ns @333MHz
INST "u_ddr2_top_1/*/gen_dqs[*].u_iob_dqs/u_iddr_dq_ce" TNM = "TNM_DQ_CE_IDDR_C1";
INST "u_ddr2_top_1/*/gen_dq[*].u_iob_dq/gen_stg2_*.u_iddr_dq" TNM = "TNM_DQS_FLOPS_C1";
TIMESPEC "TS_DQ_CE_C1" = FROM "TNM_DQ_CE_IDDR_C1" TO "TNM_DQS_FLOPS_C1" 2.4 ns;

